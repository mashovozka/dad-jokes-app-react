{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","j","console","log","handleClick","bind","handleClear","length","getJokes","numJokesToGet","axios","get","headers","Accept","res","newJoke","data","joke","has","push","id","uuid","setState","st","setItem","stringify","alert","delta","clear","sort","a","b","src","handleVote","key","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19c1251a.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./Joke.css\"\n\nclass Joke extends Component {\n\n    getColor() {\n        if (this.props.votes >= 15) {\n          return \"#4CAF50\";\n        } else if (this.props.votes >= 12) {\n          return \"#8BC34A\";\n        } else if (this.props.votes >= 9) {\n          return \"#CDDC39\";\n        } else if (this.props.votes >= 6) {\n          return \"#FFEB3B\";\n        } else if (this.props.votes >= 3) {\n          return \"#FFC107\";\n        } else if (this.props.votes >= 0) {\n          return \"#FF9800\";\n        } else {\n          return \"#f44336\";\n        }\n      }\n\n      getEmoji() {\n        if (this.props.votes >= 15) {\n          return \"em em-rolling_on_the_floor_laughing\";\n        } else if (this.props.votes >= 12) {\n          return \"em em-laughing\";\n        } else if (this.props.votes >= 9) {\n          return \"em em-smiley\";\n        } else if (this.props.votes >= 6) {\n          return \"em em-slightly_smiling_face\";\n        } else if (this.props.votes >= 3) {\n          return \"em em-neutral_face\";\n        } else if (this.props.votes >= 0) {\n          return \"em em-confused\";\n        } else {\n          return \"em em-angry\";\n        }\n      }\n\n    render(){\n        return(\n            <div className=\"Joke\">\n                <div className=\"Joke-buttons\">\n                <i className=\"fas fa-arrow-up\" onClick={this.props.upvote}/>\n                <span className=\"Joke-votes\" style={{borderColor: this.getColor()}}>{this.props.votes}</span>\n                <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}/>\n                </div>\n                <div className=\"Joke-text\">{this.props.text}</div>\n                <div className=\"Joke-smiley\">\n                <i className={this.getEmoji()} />\n                </div>\n            </div>\n        )\n    }\n}\nexport default Joke;","import React, {Component} from \"react\";\nimport Joke from \"./Joke\";\nimport axios from \"axios\";\nimport \"./JokeList.css\";\nimport uuid from \"uuid/v4\"\n\nclass JokeList extends Component{\n    static defaultProps = {\n        numJokesToGet: 10\n    }\n    constructor(props){\n        super(props);\n        this.state = {\n            jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"), \n            loading: false\n        }\n        this.seenJokes = new Set(this.state.jokes.map(j => j.text));\n        console.log(this.seenJokes)\n        this.handleClick = this.handleClick.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n    }\n    async componentDidMount(){\n        if(this.state.jokes.length === 0) this.getJokes();\n    }\n    async getJokes() {\n        try { \n        let jokes = [];\n        while(jokes.length < this.props.numJokesToGet){\n           let res = await axios.get(\"https://icanhazdadjoke.com/\", {headers: {Accept: \"application/json\"}\n        }); \n        let newJoke = res.data.joke;\n        // console.log(newJoke)\n        if(!this.seenJokes.has(newJoke)){\n        jokes.push({ id: uuid(),text: newJoke, votes: 0})  \n        } else {\n            console.log(\"Found a duplicate!\")\n            console.log(newJoke)\n        }\n        \n        }\n        this.setState(st => ({\n            loading: false,\n            jokes: [...st.jokes, ...jokes]\n        }),\n        () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes)) \n        );\n    } catch(e){\n        alert(e);\n        this.setState({loading: false})\n    }\n    }\n\n    handleVote(id, delta) {\n        this.setState( st => ({\n                jokes: st.jokes.map(j => \n                    j.id === id \n                    ? {...j, votes: j.votes + delta }\n                    : j\n                )\n            }),\n           () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes)) \n        )\n    }\n\n    handleClick(){\n        this.setState({loading: true}, this.getJokes)\n    }\n\n    handleClear(){\n        this.setState({jokes: []});\n        window.localStorage.clear();\n      \n    }\n    render(){\n        if(this.state.loading){\n            return (\n                <div className=\"JokeList-spinner\">\n                    <i className=\"far fa-8x fa-laugh fa-spin\"/>\n                    <h1 className=\"JokeList-title\">Loading...</h1>\n                </div>\n            )\n        }\n        let jokes = this.state.jokes.sort((a,b) => b.votes - a.votes)\n        return(\n            <div className=\"JokeList\">\n                <div className=\"JokeList-sidebar\">\n                <h1 className=\"JokeList-title\">\n                    <span>Dad</span> Jokes</h1>  \n                    <img src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg' />\n                    <button className=\"JokeList-getmore\" onClick={this.handleClick} >New Jokes</button>\n                    <button className=\"JokeList-clear\" onClick={this.handleClear} >Clear</button>\n                </div>\n               \n                <div className=\"JokeList-jokes\">\n                    {jokes.map(j => (\n                        <Joke\n                        upvote = {() => this.handleVote(j.id, 1)}\n                        downvote = {() => this.handleVote(j.id, -1)}\n                        key={j.id}\n                        votes={j.votes}\n                        text={j.text}\n                        />\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\nexport default JokeList;","import React, {Component} from 'react';\nimport JokeList from \"./JokeList\";\nimport './App.css';\n\nclass App extends Component{\n  render(){\n    return(\n      <div className=\"App\">\n        <JokeList />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}